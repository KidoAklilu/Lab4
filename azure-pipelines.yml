# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
# Install NuGet tool
- task: NuGetToolInstaller@1
  displayName: 'Install NuGet'

# Restore NuGet packages
- task: NuGetCommand@2
  displayName: 'Restore NuGet Packages'
  inputs:
    command: 'restore'
    restoreSolution: '$(solution)'

# Build the library project
- task: VSBuild@1
  displayName: 'Build Solution'
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

# Pack the library into a NuGet package
- script: dotnet pack ./StringExtension/StringExtension.csproj -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)
  displayName: 'Pack NuGet Package'

# Clear NuGet cache to avoid any credential issues
- script: dotnet nuget locals all --clear
  displayName: 'Clear NuGet Cache'

# Authenticate with Azure Artifacts
- task: NuGetAuthenticate@1
  displayName: 'Authenticate with Azure Artifacts'

# Push the NuGet package to Azure Artifacts Feed
- task: NuGetCommand@2
  displayName: 'Push to Azure Artifacts'
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    publishVstsFeed: 'Lab4'   

# Publish the generated package as a pipeline artifact
- task: PublishBuildArtifacts@1
  displayName: 'Publish Pipeline Artifacts'
  inputs:
    artifactName: 'nuget-package'
    targetPath: '$(Build.ArtifactStagingDirectory)'
